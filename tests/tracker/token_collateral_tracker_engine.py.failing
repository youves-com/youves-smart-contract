import smartpy as sp

import utils.constants as Constants
from utils.viewer import Viewer
from utils.fa2 import LedgerKey, RecipientTokenAmount, AdministrableFA2

from contracts.oracle.dummy_oracle import DummyOracle
from contracts.tracker.savings_pool import SavingsPool
from contracts.tracker.staking_pool import StakingPool
from contracts.tracker.options_listing import OptionsListing
from contracts.tracker.governance_token import GovernanceToken
from contracts.tracker.token_collateral_tracker_engine import TokenTrackerEngine

STARTING_BALANCE = 1000*10**12

@sp.add_test(name="Collateral FA2 Engine Settlement Premium")
def testCollateralFA2EngineSettlementPremium():
    scenario = sp.test_scenario()
    scenario.add_flag("protocol", "ithaca")
    scenario.h1("Settlement Premium Unit Test")
    scenario.table_of_contents()

    scenario.h2("Bootstrapping")
    administrator = sp.test_account("Administrator")
    alice = sp.test_account("Alice")
    bob = sp.test_account("Robert")
    dan = sp.test_account("Dan")
    scenario.h2("Accounts")
    scenario.show([administrator, alice, bob, dan])

    target_oracle = DummyOracle()
    scenario += target_oracle
    observed_oracle = DummyOracle()
    scenario += observed_oracle
    viewer = Viewer()
    scenario += viewer

    collateral_token_id = 1
    token_id = 0

    synth = AdministrableFA2({LedgerKey.make(0, administrator.address):sp.unit})
    scenario += synth

    scenario += synth.set_token_metadata(sp.record(token_id=collateral_token_id, token_info=sp.map())).run(sender=administrator.address)
    scenario += synth.mint(RecipientTokenAmount.make(alice.address, collateral_token_id, STARTING_BALANCE)).run(sender=administrator.address)
    scenario += synth.mint(RecipientTokenAmount.make(bob.address, collateral_token_id, STARTING_BALANCE)).run(sender=administrator.address)
    scenario += synth.mint(RecipientTokenAmount.make(dan.address, collateral_token_id, STARTING_BALANCE)).run(sender=administrator.address)


    tracker_engine = TokenTrackerEngine(synth.address, token_id, synth.address, collateral_token_id, 1, administrators=sp.big_map({LedgerKey.make(sp.nat(0), administrator.address):sp.unit}))
    scenario += tracker_engine
    scenario += synth.set_administrator(token_id=token_id, administrator_to_set=tracker_engine.address).run(sender=administrator)
    scenario += synth.set_token_metadata(
        sp.record(token_id=token_id, token_info=sp.map())).run(sender=tracker_engine.address)

    scenario.p("Governance Token")
    governance_token = GovernanceToken(dan.address, {LedgerKey.make(0, tracker_engine.address):sp.unit})
    scenario += governance_token

    scenario.p("Options Listing")
    options_listing = OptionsListing(synth.address, collateral_token_id, tracker_engine.address, target_oracle.address)
    scenario += options_listing

    scenario.p("Reward Pool")
    rewards_pool = StakingPool(tracker_engine.address, governance_token.address, token_id, synth.address, token_id)
    scenario += rewards_pool

    scenario.p("Savings Pool")
    savings_pool = SavingsPool(tracker_engine.address, synth.address, sp.nat(0), administrators={LedgerKey.make(sp.nat(0), administrator.address):sp.unit})
    scenario += savings_pool
    scenario += tracker_engine.set_contracts(target_price_oracle = target_oracle.address, observed_price_oracle = observed_oracle.address, reward_pool_contract = rewards_pool.address, savings_pool_contract = savings_pool.address, governance_token_contract = governance_token.address, options_contract = options_listing.address).run(sender=administrator)

    scenario.h3("Update Operators")
    scenario += synth.update_operators([sp.variant('add_operator', sp.record(
        owner=alice.address, operator=tracker_engine.address, token_id=collateral_token_id))]).run(sender=alice.address)
    scenario += synth.update_operators([sp.variant('add_operator', sp.record(
        owner=bob.address, operator=tracker_engine.address, token_id=collateral_token_id))]).run(sender=bob.address)
    scenario += synth.update_operators([sp.variant('add_operator', sp.record(
        owner=dan.address, operator=tracker_engine.address, token_id=collateral_token_id))]).run(sender=dan.address)


    scenario.h3("Alice creates Vault (settlement on)")
    scenario += tracker_engine.create_vault(True).run(sender=alice)
    scenario += tracker_engine.deposit(sp.nat(100*Constants.PRECISION_FACTOR)).run(sender=alice)

    scenario.h3("Bob creates Vault (settlement off)")
    scenario += tracker_engine.create_vault(False).run(sender=bob)
    scenario += tracker_engine.deposit(sp.nat(100*Constants.PRECISION_FACTOR)).run(sender=bob)

    scenario.h3("Mint (settlement on)")
    tokens_to_mint = sp.nat(33*Constants.PRECISION_FACTOR)
    tokens_fee = tokens_to_mint >> Constants.MINTING_FEE_BITSHIFT
    received_tokens = sp.as_nat(tokens_to_mint-tokens_fee)
    scenario += tracker_engine.mint(sp.nat(33*Constants.PRECISION_FACTOR)).run(sender=alice)
    scenario.verify_equal(tracker_engine.data.vault_contexts[alice.address].minted, tokens_to_mint)
    scenario.verify_equal(synth.data.ledger[LedgerKey.make(token_id, alice.address)], received_tokens)
    scenario.verify_equal(synth.data.ledger[LedgerKey.make(token_id, rewards_pool.address)], tokens_fee)

    scenario.h3("Mint (settlement off)")
    tokens_to_mint = sp.nat(33*Constants.PRECISION_FACTOR)
    tokens_fee = tokens_to_mint >> Constants.MINTING_FEE_BITSHIFT
    received_tokens = sp.as_nat(tokens_to_mint-tokens_fee)
    scenario += tracker_engine.mint(sp.nat(33*Constants.PRECISION_FACTOR)).run(sender=bob)
    scenario.verify_equal(tracker_engine.data.vault_contexts[bob.address].minted, tokens_to_mint)
    scenario.verify_equal(synth.data.ledger[LedgerKey.make(token_id, bob.address)], received_tokens)
    scenario.verify_equal(synth.data.ledger[LedgerKey.make(token_id, rewards_pool.address)], tokens_fee*2)

    now = sp.timestamp(Constants.SECONDS_PER_WEEK)

    scenario.h3("Claim Gov tokens after one week")

    price = 1000000
    gov_tokens_alice = Constants.GOVERNANCE_TOKEN_ISSUANCE_RATE*Constants.SECONDS_PER_WEEK

    scenario += governance_token.claim().run(sender=alice, now=now)
    scenario += governance_token.claim().run(sender=bob, now=now)

    scenario.verify_equal(abs(governance_token.data.ledger[LedgerKey.make(token_id, alice.address)]-gov_tokens_alice) < 10**7, True) #fixed point arithmentic we allow an error...
    scenario.verify_equal(governance_token.data.stakes.contains(bob.address), False)
    scenario.verify_equal(governance_token.data.ledger.contains(LedgerKey.make(token_id, bob.address)), False)

    scenario.h3("Test the touch logic")
    price = 800000
    scenario += target_oracle.set_price(price) # the price has dropped by 20% we can re-touch the vaults.
    scenario += tracker_engine.touch([alice.address, bob.address])
    scenario.verify_equal(governance_token.data.stakes[alice.address], 33*price*tracker_engine.data.compound_interest_rate)
    scenario.verify_equal(governance_token.data.stakes.contains(bob.address), False)

    price = 1000000
    scenario += target_oracle.set_price(price) # the price back to normal we can re-touch the vaults.
    scenario += tracker_engine.touch([alice.address, bob.address])
    scenario.verify_equal(governance_token.data.stakes[alice.address], 33*price*tracker_engine.data.compound_interest_rate)
    scenario.verify_equal(governance_token.data.stakes.contains(bob.address), False)

    scenario.h3("Can only settle on Alice")
    scenario.p("Bob advertises intent")
    scenario += synth.update_operators([sp.variant("add_operator", sp.record(
        owner=bob.address,
        operator=options_listing.address,
        token_id=token_id
    ))]).run(sender=bob, now=now)

    scenario += options_listing.advertise_intent(11*Constants.PRECISION_FACTOR).run(sender=bob, now=now)
    now = now.add_seconds(24*60*60)

    scenario.p("Bob settles on himself (and fails)")
    scenario += options_listing.execute_intent(address=bob.address, token_amount=11*Constants.PRECISION_FACTOR).run(sender=bob, now=now, valid=False)

    scenario.p("Bob settles on alice (and succeeds")
    scenario += options_listing.execute_intent(address=alice.address, token_amount=11*Constants.PRECISION_FACTOR).run(sender=bob, now=now)

    scenario.p("claim after a settlement (after 1 week)")
    now = now.add_seconds(6*24*60*60)

    scenario += governance_token.claim().run(sender=alice, now=now)
    scenario += governance_token.claim().run(sender=bob, now=now)

@sp.add_test(name="Collateral FA2 Tracker Engine")
def testCollateralFA2TrackerEngine():
    scenario = sp.test_scenario()
    scenario.add_flag("protocol", "ithaca")
    scenario.h1("Tracker Engine Unit Test")
    scenario.table_of_contents()

    scenario.h2("Bootstrapping")
    administrator = sp.test_account("Administrator")
    alice = sp.test_account("Alice")
    bob = sp.test_account("Robert")
    dan = sp.test_account("Dan")
    scenario.h2("Accounts")
    scenario.show([administrator, alice, bob, dan])

    target_oracle = DummyOracle()
    scenario += target_oracle
    observed_oracle = DummyOracle()
    scenario += observed_oracle
    viewer = Viewer()
    scenario += viewer

    collateral_token_id = 1
    token_id = 0

    synth = AdministrableFA2({LedgerKey.make(0, administrator.address):sp.unit})
    scenario += synth

    scenario += synth.set_token_metadata(sp.record(token_id=collateral_token_id, token_info=sp.map())).run(sender=administrator.address)
    scenario += synth.mint(RecipientTokenAmount.make(alice.address, collateral_token_id, STARTING_BALANCE)).run(sender=administrator.address)
    scenario += synth.mint(RecipientTokenAmount.make(bob.address, collateral_token_id, STARTING_BALANCE)).run(sender=administrator.address)
    scenario += synth.mint(RecipientTokenAmount.make(dan.address, collateral_token_id, STARTING_BALANCE)).run(sender=administrator.address)


    tracker_engine = TokenTrackerEngine(synth.address, token_id, synth.address, collateral_token_id, administrators=sp.big_map({LedgerKey.make(sp.nat(0), administrator.address):sp.unit}))
    scenario += tracker_engine
    scenario += synth.set_administrator(token_id=token_id, administrator_to_set=tracker_engine.address).run(sender=administrator)
    scenario += synth.set_token_metadata(
        sp.record(token_id=token_id, token_info=sp.map())).run(sender=tracker_engine.address)

    scenario.p("Governance Token")
    governance_token = GovernanceToken(tracker_engine.address, {LedgerKey.make(0, tracker_engine.address):sp.unit})
    scenario += governance_token

    scenario.p("Options Listing")
    options_listing = OptionsListing(synth.address, collateral_token_id, tracker_engine.address, target_oracle.address)
    scenario += options_listing

    scenario.p("Reward Pool")
    rewards_pool = StakingPool(tracker_engine.address, governance_token.address, token_id, synth.address, token_id)
    scenario += rewards_pool

    scenario.p("Savings Pool")
    savings_pool = SavingsPool(tracker_engine.address, synth.address, sp.nat(0), administrators={LedgerKey.make(sp.nat(0), administrator.address):sp.unit})
    scenario += savings_pool
    scenario += tracker_engine.set_contracts(target_price_oracle = target_oracle.address, reward_pool_contract = rewards_pool.address, savings_pool_contract = savings_pool.address, governance_token_contract = governance_token.address, options_contract = options_listing.address).run(sender=administrator)

    scenario.h3("Update Operators")
    scenario += synth.update_operators([sp.variant('add_operator', sp.record(
        owner=alice.address, operator=tracker_engine.address, token_id=collateral_token_id))]).run(sender=alice.address)
    scenario += synth.update_operators([sp.variant('add_operator', sp.record(
        owner=bob.address, operator=tracker_engine.address, token_id=collateral_token_id))]).run(sender=bob.address)
    scenario += synth.update_operators([sp.variant('add_operator', sp.record(
        owner=dan.address, operator=tracker_engine.address, token_id=collateral_token_id))]).run(sender=dan.address)

    scenario.h3("Mint")
    scenario += tracker_engine.create_vault(True).run(sender=alice)
    scenario += tracker_engine.deposit(sp.nat(100*Constants.PRECISION_FACTOR)).run(sender=alice)
    tokens_to_mint = sp.nat(33*Constants.PRECISION_FACTOR)
    tokens_fee = tokens_to_mint >> Constants.MINTING_FEE_BITSHIFT
    received_tokens = sp.as_nat(tokens_to_mint-tokens_fee)

    scenario += tracker_engine.mint(sp.nat(33*Constants.PRECISION_FACTOR)).run(sender=alice)
    scenario.verify_equal(tracker_engine.data.vault_contexts[alice.address].minted, tokens_to_mint)
    scenario.verify_equal(synth.data.ledger[LedgerKey.make(token_id, alice.address)], received_tokens)
    scenario.verify_equal(synth.data.ledger[LedgerKey.make(token_id, rewards_pool.address)], tokens_fee)

    scenario.h3(
        "Liquidation with no interest rate impact (everything happens at now 0)")
    scenario.p("Transfer Tokens to Bob")
    scenario += synth.transfer([sp.record(from_=alice.address, txs=[
                                                    sp.record(to_=bob.address, amount=received_tokens, token_id=token_id)])]).run(sender=alice)


    scenario.p("Bob liquidates alice in one go")
    tokens_to_liquidate = sp.nat(26*Constants.PRECISION_FACTOR)
    one_token = sp.nat(1*Constants.PRECISION_FACTOR)
    current_price = sp.nat(2000000)
    scenario += target_oracle.set_price(current_price)
    scenario += tracker_engine.liquidate(vault_owner=alice.address, token_amount=tokens_to_liquidate).run(sender=bob)
    scenario.p("Cannot liquidate more")
    scenario += tracker_engine.liquidate(vault_owner=alice.address,  token_amount=one_token).run(sender=bob, valid=False)

    remaining_tokens_in_vault = sp.as_nat(received_tokens-tokens_to_liquidate)
    liquidation_reward = tokens_to_liquidate>>Constants.LIQUIDATION_REWARD_BITSHIFT
    scenario.verify_equal(tracker_engine.data.vault_contexts[alice.address].minted, sp.as_nat(tokens_to_mint-tokens_to_liquidate))
    scenario.verify_equal(synth.data.ledger[LedgerKey.make(token_id, bob.address)], remaining_tokens_in_vault)

    scenario.h1("Interest Rate Calculations")
    scenario.h3("Phase 1")
    minted_t0 = 7000000000000
    now = sp.timestamp(Constants.SECONDS_PER_WEEK)
    scenario += tracker_engine.update().run(now=now)

    minted_t1 = minted_t0*(tracker_engine.data.compound_interest_rate)//Constants.PRECISION_FACTOR
    asset_accrual = minted_t0*(tracker_engine.data.reference_interest_rate*Constants.SECONDS_PER_WEEK)//Constants.PRECISION_FACTOR
    spread_accrual = minted_t0*(Constants.SECONDS_INTEREST_SPREAD*Constants.SECONDS_PER_WEEK)//Constants.PRECISION_FACTOR+tokens_fee
    scenario.show(minted_t1)
    scenario.show(asset_accrual)
    scenario.show(spread_accrual)
    scenario.verify_equal(minted_t1, tracker_engine.data.total_supply)
    minted_t1 = 7001879718400 # we need to do this because otherwise we end up in a situation where minted_t1 is computed with the new compound interest rate
    scenario.verify_equal(minted_t1, tracker_engine.data.total_supply)

    scenario.verify_equal(asset_accrual, synth.data.ledger[LedgerKey.make(token_id, savings_pool.address)])
    scenario.verify_equal(spread_accrual, synth.data.ledger[LedgerKey.make(token_id, rewards_pool.address)])


    scenario.h3("Phase 2")
    now = sp.timestamp(Constants.SECONDS_PER_WEEK*2)
    scenario += tracker_engine.update().run(now=now)

    minted_t2 = minted_t0*(tracker_engine.data.compound_interest_rate)//Constants.PRECISION_FACTOR
    asset_accrual += minted_t1*(tracker_engine.data.reference_interest_rate*Constants.SECONDS_PER_WEEK)//Constants.PRECISION_FACTOR
    spread_accrual += minted_t1*(Constants.SECONDS_INTEREST_SPREAD*Constants.SECONDS_PER_WEEK)//Constants.PRECISION_FACTOR
    scenario.show(minted_t2)
    scenario.show(asset_accrual)
    scenario.show(spread_accrual)
    scenario.verify_equal(sp.as_nat(minted_t2-1), tracker_engine.data.total_supply)
    scenario.verify_equal(asset_accrual, synth.data.ledger[LedgerKey.make(token_id, savings_pool.address)])
    scenario.verify_equal(spread_accrual, synth.data.ledger[LedgerKey.make(token_id, rewards_pool.address)])

    scenario.p("Bob joins the savings pool")
    scenario += synth.update_operators([sp.variant("add_operator", sp.record(
        owner=bob.address,
        operator=savings_pool.address,
        token_id=token_id
    ))]).run(sender=bob, now=now)
    scenario += savings_pool.deposit(Constants.PRECISION_FACTOR).run(sender=bob, now=now)
    scenario.p("Alice bails out")

    scenario.h1("Options settlement")
    scenario.p("Bob advertises intent")
    scenario += synth.update_operators([sp.variant("add_operator", sp.record(
        owner=bob.address,
        operator=options_listing.address,
        token_id=token_id
    ))]).run(sender=bob, now=now)

    scenario += options_listing.advertise_intent(Constants.PRECISION_FACTOR).run(sender=bob, now=now)
    now = sp.timestamp(Constants.SECONDS_PER_WEEK*2+24*60*60)
    scenario += options_listing.execute_intent(address=alice.address, token_amount=Constants.PRECISION_FACTOR).run(sender=bob, now=now)
